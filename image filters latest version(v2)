# include <iostream>
# include <cctype>
# include <string>
# include<cctype>
# include <cstring>
# include <algorithm>
# include <vector>
#include <cmath>
#include <sstream>
#include <iomanip>
#include <regex>
#include "Image_Class.h"
using namespace std;

void invert_image(Image& primary);
void rotate_image(Image& primary);
void grayscale_image(Image& primary);
void filter_choices(string filter_choice, Image& primary);
string valid_choice(string filter_choice);

int main() {

    // welcome user and ask him to load the image via name and extension
    cout<<"Welcome to our image filters application"<<endl<<endl;
    cout<<"Load your image"<<endl;
    cout<<"Enter your image name: "<<endl;
    string image_name;
    cin>>image_name;
    Image primary;

    // make sure that the image is in the directory
    while(true){
        try{
            primary.loadNewImage(image_name);
            cout<<"Loaded successfully"<<endl;
            cout<<endl;
            break;

        }
        catch(const invalid_argument& e) {
            cout<<"Enter a correct image name"<<endl;
            cin>>image_name;
        }
    }

    // print out filter options for user
    cout<<"1. Grayscale"<<endl;
    cout<<"3. Invert image"<<endl;
    cout<<"6. Rotate image"<<endl;
    cout<<"7. Exit"<<endl<<endl;
    cout<<"Please enter your filter choice: "<<endl;
    string filter_choice;
    cin>>filter_choice;

    // validate filter choice and do the filter according to the choice of the user
    filter_choice=valid_choice(filter_choice);
    filter_choices(filter_choice,primary);


}

void invert_image(Image& primary) {
    for (int i = 0; i < primary.width; i++) {
        for (int j = 0; j < primary.height; j++) {
            for (int k = 0; k < primary.channels; k++) {
                primary(i, j, k) = 255 - primary(i, j, k);
            }
        }
    }
    primary.saveImage("invert_image.jpg");
}


void rotate_image( Image& primary) {
    Image rotated_image(primary.height, primary.width);
    for (int i = 0; i < primary.width; i++) {
        for (int j = 0; j < primary.height; j++) {
            rotated_image(j, primary.width - 1 - i, 0) = primary(i, j, 0);
            rotated_image(j, primary.width - 1 - i, 1) = primary(i, j, 1);
            rotated_image(j, primary.width - 1 - i, 2) = primary(i, j, 2);
        }
    }
    rotated_image.saveImage("rotate_image.jpg");
}

void grayscale_image(Image& primary){
    // loop on each pixel, calculate average of RGB and make each pixel equal that average
    for(int i=0; i<primary.width; i++){
        for(int j=0; j<primary.height; j++){
            int avg=0;
            avg+=primary(i,j,0);
            avg+=primary(i,j,1);
            avg+=primary(i,j,2);
            avg=avg/3;
            primary(i,j,0)=avg;
            primary(i,j,1)=avg;
            primary(i,j,2)=avg;
        }
    }
    primary.saveImage("Grayscale.jpg");
}

// function that calls filter function according to user's choice
void filter_choices(string filter_choice, Image& primary){
    if (filter_choice == "1") {
        grayscale_image(primary);
    }
    else if (filter_choice == "3") {
        invert_image(primary);
    }
    else if (filter_choice == "6") {
        rotate_image(primary);
    }
    else if(filter_choice=="7"){
        cout<<"Thanks for using our image filters application"<<endl;
        exit(0);
    }
}

// function that validates filter_choice
string valid_choice(string filter_choice){
    while(true){
        if(filter_choice=="1")break;
        else if(filter_choice=="3")break;
        else if(filter_choice=="6")break;
        else if(filter_choice=="7"){
            cout<<"Thanks for using our image filter application"<<endl;
            exit(0);
        }
        else{
            cout<<"Please enter a valid choice"<<endl;
            cin>>filter_choice;
        }
    }
    return filter_choice;
}
